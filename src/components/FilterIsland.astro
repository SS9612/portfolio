const { items = [] } = Astro.props;
const tags = Array.from(new Set(items.flatMap(i => i.tags || []))).sort();
---
<div class="filter">
  <div class="controls">
    <label for="q" class="sr-only">Search projects</label>
    <input id="q" class="card" placeholder="Search projects" inputmode="search" />
    <label for="tag" class="sr-only">Filter by tag</label>
    <select id="tag" class="card">
      <option value="">All tags</option>
      {tags.map(t => <option value={t}>{t}</option>)}
    </select>
  </div>
  <div id="status" aria-live="polite" class="sr-only"></div>
  <div id="grid" class="projects-grid"></div>
  <script type="application/json" id="data">{JSON.stringify(items)}</script>
</div>
<script>
  const dataEl = document.getElementById('data');
  const items = JSON.parse(dataEl.textContent || '[]');
  const grid = document.getElementById('grid');
  const q = document.getElementById('q');
  const tag = document.getElementById('tag');
  const status = document.getElementById('status');

  const tpl = (p) => `
    <a class="card project-card" href="/projects/${p.slug}" aria-label="Open ${p.name} project">
      <div class="project-image"><img src="${p.thumbnail}" alt="${p.name}" loading="lazy" width="280" height="157" /></div>
      <div class="project-header"><h3 class="project-title">${p.name}</h3><span class="project-status status-chip" data-status="${p.status}" aria-label="Status: ${p.status}">${p.status}</span></div>
      <p class="project-tagline">${p.tagline}</p>
      <div class="project-stack">${(p.stack||[]).join(' Â· ')}</div>
    </a>`;

  const render = (list) => {
    if (list.length > 40) {
      grid.innerHTML = '';
      let i = 0;
      const chunk = () => {
        const end = Math.min(i + 20, list.length);
        const frag = document.createDocumentFragment();
        for (; i < end; i++) {
          const wrapper = document.createElement('div');
          wrapper.innerHTML = tpl(list[i]);
          frag.appendChild(wrapper.firstElementChild);
        }
        grid.appendChild(frag);
        if (i < list.length) requestIdleCallback(chunk, { timeout: 50 });
      };
      requestIdleCallback(chunk, { timeout: 50 });
    } else {
      grid.innerHTML = list.map(tpl).join('');
    }
    status.textContent = list.length === 0 ? 'No matches. Try clearing filters.' : `${list.length} project${list.length !== 1 ? 's' : ''} found`;
  };

  const filter = () => {
    const term = (q.value || '').toLowerCase().trim();
    const tg = tag.value;
    let list = items;
    if (tg) list = list.filter(p => (p.tags||[]).includes(tg));
    if (term) list = list.filter(p => `${p.name} ${p.tagline} ${(p.stack||[]).join(' ')}`.toLowerCase().includes(term));
    render(list);
  };

  let t;
  q.addEventListener('input', () => { clearTimeout(t); t = setTimeout(filter, 200); });
  tag.addEventListener('change', filter);

  render(items);
</script>
<style>
  .controls { display:flex; gap:.5rem; margin-bottom:1rem; }
  .sr-only { position:absolute; width:1px; height:1px; padding:0; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0; }
</style>
